const fs = require("fs");
const path = require("path");

const stateFile = path.resolve(__dirname, "../../data/antiLegioState.json");

// Cargar estado inicial
let antiLegioEnabled = false;
if (fs.existsSync(stateFile)) {
  const data = JSON.parse(fs.readFileSync(stateFile, "utf-8"));
  antiLegioEnabled = data.antiLegioEnabled || false;
}

// Guardar estado en archivo
function saveState() {
  fs.writeFileSync(stateFile, JSON.stringify({ antiLegioEnabled }));
}

// Comando para manejar anti-legio
module.exports = {
  name: "anti-legios",
  description: "Activa o desactiva la protección contra mensajes largos",
  commands: ["anti-legio", "antilegios"],
  usage: ${PREFIX}anti-legio <1 | 0>,
  handle: async ({ args, sendReply, sendErrorReply }) => {
    if (args.length === 0) {
      await sendErrorReply(
        "Debes proporcionar 1 para activar o 2 para desactivar el anti-legios. Ejemplo: !anti-legio 1"
      );
      return;
    }

    if (args[0] === "1") {
      antiLegioEnabled = true;
      saveState(); // Guardar estado
      await sendReply("✅ El anti-legios ha sido ACTIVADO.");
    } else if (args[0] === "0") {
      antiLegioEnabled = false;
      saveState(); // Guardar estado
      await sendReply("❌ El anti-legios ha sido DESACTIVADO.");
    } else {
      await sendErrorReply("Opción inválida. Usa 1 para activar o 0 para desactivar.");
    }
  },
};

module.exports.middleware = async ({ fullMessage, webMessageInfo, socket, remoteJid }) => {
  if (!antiLegioEnabled) return;

  if (fullMessage.length > 1000) {
    // Manejo del mensaje largo...
  }
};
